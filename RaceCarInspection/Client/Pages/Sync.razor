@page "/sync"
@using Blazored.LocalStorage;
@using RaceCarInspection.Client.Models;
@using RaceCarInspection.Client.Services;
@using RaceCarInspection.Shared.Models;
@inject ISyncService syncService
@inject ILocalStorageService localStorage;
@inject IJSRuntime JS

<div class="row">
    <div class="col-lg-6 col-md-8 col-sm-12">
        <h3>Sync Data</h3>
        <div class="lead">
            Use this page to manually sync data with the server. This will download new car inspections and updated SOPs.
        </div>
        <strong>Note: This is a demo POC app. I promise none of your files are being uploaded</strong>
        <br />
        <div class="mt-3">
            <label for="deviceName">Give your device a name</label>
            <input @bind="deviceName" class="form-control" id="deviceName" placeholder="Device Name">

            @if (!string.IsNullOrEmpty(deviceName))
            {
                <button type="button" class="btn btn-primary mt-2 mb-3" @onclick="StartSync">
                    <span class="oi oi-cloud-download" aria-hidden="true"></span>
                    <span role="status">Sync Now</span>
                </button>
                <InputCheckbox @bind-Value="enableBackgroundSync" @onchange="EnableBackgroundSyncChanged">Enable Background Sync</InputCheckbox>
            }
        </div>
    </div>
</div>


<div class="mb-3 p-2 mt-3">
    @if (progressPercentComplete >= 0)
    {
        <div class="progress" role="progressbar" aria-label="Example 20px high" aria-valuenow="@progressPercentComplete" aria-valuemin="0" aria-valuemax="100" style="height: 20px">
            <div class="progress-bar" style=@($"width: {progressPercentComplete}%")></div>
        </div>
        <div>
            Battery Status (Chrome only): IsCharging=@batteryStatus.Charging, DischargeTime=@(batteryStatus.DischargingTime)s, Level=@(batteryStatus.Level * 100)%
        </div>
    }

    <label for="exampleFormControlTextarea1" class="form-label">Sync Progress</label>
    <textarea class="form-control" readonly @bind="syncLog" rows="12"></textarea>
</div>

@code {
    private string syncLog;
    private string deviceName;
    private int progressPercentComplete = -1;
    private PushRegistration pushRegistration;
    private BatteryStatus batteryStatus = new BatteryStatus();
    private bool enableBackgroundSync = false;

    protected override async Task OnInitializedAsync()
    {
        pushRegistration = await localStorage.GetItemAsync<PushRegistration>("pushRegistration");
        deviceName = pushRegistration?.DeviceName;
    }

    private async Task EnableBackgroundSyncChanged()
    {
        var jsInProcess = (IJSInProcessRuntime)JS;
        await jsInProcess.InvokeVoidAsync("configureBackgroundSync", enableBackgroundSync);
    }

    private async Task StartSync()
    {
        if (pushRegistration == null)
        {
            pushRegistration = new PushRegistration { DeviceName = deviceName };
        }
        else
        {
            pushRegistration.DeviceName = deviceName;
        }

        await localStorage.SetItemAsync<PushRegistration>("pushRegistration", pushRegistration);

        var jsInProcess = (IJSInProcessRuntime)JS;
        batteryStatus = await jsInProcess.InvokeAsync<BatteryStatus>("getBatteryInfo");
        await syncService.SyncData(deviceName, OnSyncProgressUpdated);
    }

    private async Task OnSyncProgressUpdated(SyncEventArgs syncEvent)
    {
        if (string.IsNullOrEmpty(syncLog))
        {
            syncLog = syncEvent.UpdateLogMessage;
        }
        else
        {
            syncLog += Environment.NewLine + syncEvent.UpdateLogMessage;
        }
        progressPercentComplete = syncEvent.ProgressCompletePercentage;
        StateHasChanged();
        await Task.CompletedTask;
    }
}
